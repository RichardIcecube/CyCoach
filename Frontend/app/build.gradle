plugins {
    id 'com.android.application'
    id 'jacoco'
}

android {
    namespace 'com.example.myexperiments'
    compileSdk 33

    dataBinding {
        enabled = true
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    defaultConfig {
        applicationId "com.example.myexperiments"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation('com.squareup.okhttp3:okhttp:5.0.0-alpha.11')
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment:2.5.3'
    implementation 'androidx.navigation:navigation-ui:2.5.3'
    implementation 'com.jaredrummler:material-spinner:1.3.1'
    //implementation fileTree(dir: '/Users/apple/Library/Android/sdk/platforms/android-33', include: ['*.aar', '*.jar'], exclude: [])
    //implementation fileTree(dir: 'C:\\Users\\zanee\\AppData\\Local\\Android\\Sdk\\platforms\\android-33', include: ['*.aar', '*.jar'], exclude: [])
    //Uncomment for javadoc
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    debugImplementation 'androidx.test.ext:junit:1.1.5'
    debugImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.android.volley:volley:1.2.1'
    implementation files('libs/java_websocket.jar')
    debugImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    debugImplementation 'androidx.test:runner:1.4.0'
    debugImplementation 'androidx.test:rules:1.4.0'
    debugImplementation "androidx.fragment:fragment-testing:1.4.1"
    debugImplementation "androidx.navigation:navigation-testing:2.4.1"
    debugImplementation "androidx.test:core:1.4.0"
    debugImplementation 'org.assertj:assertj-core:3.21.0'
}

jacoco {
    toolVersion = "0.8.7" // Set the version of Jacoco you want to use
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'connectedDebugAndroidTest') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for the instrumented tests."

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            '**/*Test$*.*'
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "${buildDir}", includes: [
            'jacoco/connectedDebugAndroidTest.exec'
    ]))
}